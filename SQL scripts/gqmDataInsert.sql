USE GQM;

INSERT INTO Goal VALUES
	(1, "To measure how difficult a web API is to learn, from a new user's (the developer) perspective"), -- Goal ID: 1.
    (2, "To measure how difficult is to perform tasks in a web API, from the user's perspective"), -- Goal ID: 2.
    (3, "To measure how easy to remember are the elements of a web API, from the user's perspective"), -- Goal ID: 3.
    (4, "To measure how many errors users of a web API make while using it"), -- Goal ID: 4.
    (5, "To measure how many internal errors a web API experiences while users use it"), -- Goal ID: 5.
    (6, "To measure how satisfactory is to use a web API, from the user's perspective");  -- Goal ID: 6.

INSERT INTO Question VALUES
	(1, 1, "What influences the difficulty for users to accomplish basic tasks?"),
    (2, 1, "What influences the clarity of web API elements' names?"),
    (3, 1, "What influences the clarity of web API documentation?"),
    (4, 2, "What influences the efficiency of the users of a web API?"),
    (5, 3, "What influences the memorability of web API elements?"),
    (6, 4, "How can the errors made by web API users be tracked?"),
    (7, 5, "How can the occurence of internal errors be tracked?"),
    (8, 6, "What influences the satisfaction of the users of a web API?");

INSERT INTO Metric VALUES
	(1, 'Abstraction level',
	 'Abstraction level exposed by the web API. Leaking implementation details can cause confusion for third-party developers and lead to a bad experience.',
	 'Subjective',
	 '{"1":"The API does not expose internal details of the implementation.","0":"The API exposes internal details of the implementation."}',
	 1.0,
	 "If the web API users do not have need for abstraction, that is, if they expect to encounter implementation details while using the API."),

	(2, 'Abstraction of endpoint names',
	 'How abstract endpoint names are. Using the right level of abstraction for names helps developers understand what they can do with the web API.',
	 'Subjective',
	 '{"1":"Endpoints have concrete names (e.g.: books) when possible.","0":"Endpoints have abstract names (e.g.: items) when they can be more specific."}',
	 0.6,
	 NULL),

	(3, 'Abstraction of parameter names',
	 'How abstract parameter names are. Using the right level of abstraction for names helps developers understand what they can do with the web API.',
	 'Subjective',
	 '{"1":"Parameters have concrete names (e.g.: year) when possible.","0":"Endpoints have abstract names (e.g.: param1) when they can be more specific."}',
	 0.6,
	 NULL),

	(4, 'Average base URLs per resource',
	 'Average number of base URLs per resource. A simple and intuitive base URL design makes a web API easy to use.',
	 'Objective',
	 '{"1":"Average ≤ 2 base URLs per resource (e.g.: /users/Foo).","0.5":"Average 3 base URLs per resource.","0":"Average > 3 base URLs per resource."}',
	 0.6,
	 NULL),

	(5, 'Average number of parameters',
	 'Average number of parameters endpoints have. Long lists of parameters should be avoided when possible.',
	 'Objective',
	 '{"1":"Average ≤ 5 parameters.","0.5":"Average 6–8 parameters.","0":"Average > 8 parameters."}',
	 0.8,
     NULL),

	(6, 'Average number of returned elements',
	 'Average number of elements returned by the endpoints that are meant to return something. The number of returned elements has a strong influence on usability.',
	 'Objective',
	 '{"1":"","0.5":"","0":""}',
	 0.8,
	 NULL),

	(7, 'Average response time',
	 'Time elapsed from the moment the developer makes a request until it receives a response back. High-performing APIs are considered to have between 0.1 and 1 second average response time. At 2 seconds, the delay is noticeable. At 5 seconds, the delay can cause the developers to abandon the API.',
	 'Objective',
	 '{"1":"Average response time of all operations is ≤ 1 second.","0.5":"Average response time of all operations is 2–4 seconds.","0":"Average response time of all operations is > 4 seconds."}',
	 1.0,
	 NULL),

	(8, 'Clarity of endpoint names',
	 'How clear endpoint names are. Using concise and self-explanatory endpoint names improves the understandability of a web API. Code names, awkward vocabulary, cryptic abbreviations, and having more than three words should be avoided for endpoint names.',
	 'Subjective',
	 '{"1":"All endpoints have self-explanatory names.","0.5":"One or more endpoints have unclear names.","0":"No endpoint has a self-explanatory name."}',
	 1.0,
	 NULL),

	(9, 'Complexity of returned data',
	 'How complex is the data returned by the endpoints that are meant to return something. Using appropriate data formats for returned data is important to provide a straightforward representation. Avoid overly complex or cryptic data formats. For JSON objects, a max. depth of 3 and a max. number of properties of 20 is recommended.',
	 'Subjective',
	 '{"1":"JSON objects returned have an average max. depth of ≤ 3 and an average max. number of properties of ≤ 20. Also, formats returned are easy to understand.","0.5":"JSON objects returned have an average max. depth of > 3 or an average max. number of properties of > 20. Also, formats returned are easy to understand.","0":"JSON objects returned have an average max. depth of > 3 and an average max. number of properties of > 20. Also, formats returned may be difficult to understand."}',
	 0.6,
	 NULL),

	(10, 'Consecutive parameters of the same type',
	 'Maximum number of consecutive parameters of the same type across all endpoints. Having multiple consecutive parameters of the same type can make endpoints difficult to use, because ordering mistakes are hard to find.',
	 'Objective',
	 '{"1":"No endpoint with more than 2 consecutive parameters of the same type.","0.5":"No endpoint with more than 3 consecutive parameters of the same type.","0":"At least one endpoint has more than 3 consecutive parameters of the same type."}',
	 0.4,
	 NULL),

	(11, 'Consistency of endpoint names',
	 'How consistent endpoint names are. Language and conventions used for naming endpoints should be consistent. A consistent design is easy to understand and use.',
	 'Subjective',
	 '{"1":"A naming convention is followed for endpoint names.","0":"No naming convention is followed for endpoint names."}',
	 0.8,
	 NULL),

	(12, 'Consistency of parameter names',
	 'How consistent parameter names are. Language and conventions used for naming parameters should be consistent. A consistent design is easy to understand and use.',
	 'Subjective',
	 '{"1":"A naming convention is followed for parameter names.","0":"No naming convention is followed for parameter names."}',
	 0.8,
	 NULL),

	(13, 'Consistency of parameter types',
	 'Whether or not there are parameters with the same name but different types on the web API. Having parameters with identical names, but distinct types across different endpoints leads to code bloat in developers’ code bases, and therefore negatively impacts usability.',
	 'Objective',
	 '{"1":"Different parameters representing the same property use the same data type.","0":"Different parameters representing the same property use inconsistent data types."}',
	 1.0,
	 NULL),

	(14, 'Consistency of returned data',
	 'How consistent the data returned by the web API is. Language and conventions used for formatting returned data should be consistent. A consistent design is easy to understand and use.',
	 'Objective',
	 '{"1":"Data is always returned in the same language and formatting conventions are used.","0.5":"Data is always returned in the same language, but formatting conventions are not used.","0":"Data is returned in different languages."}',
	 0.8,
	 NULL),

	(15, 'Current user rating',
	 'The current user rating the web API has, where it is currently published.',
	 'Objective',
	 '{"1":"90–100 %","0.5":"50–89 %","0":"0–49 %"}',
	 1.0,
	 "If the web API is not published anywhere."),

	(16, 'Developer stack size',
	 'Number of additional tools and libraries a developer has to install in order to use the web API.',
	 'Objective',
	 '{"1":"The user does not have to install additional software to use the API.","0.5":"The user has to install ≤ 3 additional tools and libraries to use the API.","0":"The user has to install > 3 additional tools and libraries to use the API."}',
	 0.6,
	 NULL),

	(17, 'Documentation of endpoints',
	 'Proportion of endpoints that are documented. Ideally, every element of the web API should be documented.',
	 'Objective',
	 '{"1":"All endpoints are documented.","0.5":"Some endpoints are documented.","0":"There is no documentation for endpoints."}',
	 1.0,
	 NULL),

	(18, 'Documentation of HTTP methods',
	 'Proportion of HTTP methods (part of the endpoints) that are documented. Ideally, every element of the web API should be documented.',
	 'Objective',
	 '{"1":"All HTTP methods are documented.","0.5":"Some HTTP methods are documented.","0":"There is no documentation for HTTP methods."}',
	 1.0,
	 NULL),

	(19, 'Endpoint grouping by functionality',
	 'Whether or not endpoints with similar functionality are visibly grouped. Grouping endpoints by functionality facilitates navigating through the API and improves understandability. This can be done by sorting endpoints in the definition document and taking advantage of the API specification format.',
	 'Subjective',
	 '{"1":"Endpoints that perform similar tasks are grouped (using tags).","0.5":"Only some endpoints are grouped by functionality. That is, endpoint grouping can be improved.","0":"No grouping."}',
	 0.8,
	 NULL),

	(20, 'Endpoint name-functionality correspondence',
	 'Whether or not the endpoints of the web API perform the tasks suggested by their name. Endpoints should not do less/more than what their name suggest and, if possible, not more than one thing.',
	 'Subjective',
	 '{"1":"All endpoints perform only the task suggested by their name.","0":"One or more endpoints perform more or fewer tasks than their name suggests."}',
	 1.0,
	 NULL),

	(21, 'Error categorization by type',
	 'Whether or not errors returned by the web API are grouped or categorized by their meaning. Organizing feedback facilitates interpretation, makes troubleshooting easier and reduces developer frustration.',
	 'Objective',
	 '{"1":"Yes.","0":"No."}',
	 0.8,
	 NULL),

	(22, 'HATEOAS support',
	 'Whether or not the web API supports HATEOAS. Supporting HATEOAS makes the web API more scalable and extensible, and facilitates its discovery for developers.',
	 'Objective',
	 '{"1":"Yes. Links are used to point to related resources and to possible resource state transitions.","0":"No."}',
	 0.6,
	 NULL),

	(23, 'Identification of deprecated elements',
	 'Whether or not the documentation of the web API includes deprecated elements. Deprecated elements should be clearly identified.',
	 'Objective',
	 '{"1":"Yes.","0":"No."}',
	 1.0,
	 NULL),

	(24, 'Identification of required parameters',
	 'Whether or not all required endpoint parameters are explicitly marked as "required". Not doing so might cause unexpected errors and frustration for developers.',
	 'Objective',
	 '{"1":"Parameters are marked as \\"required\\" when needed.","0":"One or more required parameters are not marked as \\"required\\"."}',
	 1.0,
	 NULL),

	(25, 'Identification of required properties in responses',
	 'Whether or not all required properties in responses are explicitly marked as "required". Not doing so might cause unexpected errors and frustration for developers.',
	 'Objective',
	 '{"1":"Properties in responses are marked as \\"required\\" when needed.","0":"One or more required properties in responses are not marked as \\"required\\"."}',
	 1.0,
	 NULL),

	(26, 'Inclusion of a getting started guide',
	 'Whether or not the documentation of the web API includes a getting started guide. Having a getting started guide in the documentation help users to get up and running with the API faster.',
	 'Objective',
	 '{"1":"Yes.","0":"No."}',
	 1.0,
	 NULL),

	(27, 'Inclusion of authentication information',
	 'Whether or not the documentation of the web API includes information about authentication (if applicable). Almost every API features some sort of authentication schema, and nearly every one is different. It is because of that the API documentation should have information on how to access the web API.',
	 'Objective',
	 '{"1":"Yes.","0":"No."}',
	 0.6,
	 "If the web API does not require authentication."),
	
	(28, 'Inclusion of change information',
	 'Whether or not the documentation of the web API includes a changelog section. Having a changelog section in the documentation lets users know how stable the API. It also lets them know if anything has changed, in the instance that one of their calls stops working.',
	 'Objective',
	 '{"1":"Yes.","0":"No."}',
	 0.8,
	 NULL),

	(29, 'Inclusion of error information',
	 'Whether or not the documentation of the web API includes error information. Ideally, the API documentation should include information about common and important errors.',
	 'Objective',
	 '{"1":"Yes.","0.5":"In some cases.","0":"No."}',
	 1.0,
	 NULL),

	(30, 'Inclusion of usage examples',
	 'Whether or not the documentation of the web API includes usage examples. Ideally, the API documentation should include code samples for the most common scenarios.',
	 'Objective',
	 '{"1":"Yes.","0.5":"In some cases.","0":"No."}',
	 1.0,
	 NULL),

	(31, 'JSON support',
	 'Whether the REST API supports or not the JSON type in requests and/or responses.',
	 'Objective',
	 '{"1":"Yes.","0":"No."}',
	 0.8,
	 NULL),

	(32, 'Name similarity between different endpoint versions',
	 'How similar names for different versions of an endpoint (that coexist) are, if applicable.',
	 'Subjective',
	 '{"1":"Different endpoint versions use dissimilar names that leave no room for confusion.","0.5":"Different endpoint versions use similar names that could be confusing.","0":"Different endpoint versions use almost identical names."}',
	 0.8,
	 "If the web API does not have coexisting different versions of a same endpoint."),

	(33, 'Number of endpoints',
	 'Number of endpoints the web API has. This number is expected to vary widely depending on the context, but it is recommended to keep the number of endpoints under 24.',
	 'Objective',
	 '{"1":"≤ 12 endpoints.","0.5":"12–24 endpoints.","0":"> 24 endpoints."}',
	 0.6,
	 NULL),

	(34, 'Number of HTTP 4XX errors in a period of X minutes',
	 'Number of client-side errors that occur in a defined period of time. If the number of errors is high, documentation might be deficient, naming choices poor, or something along these lines may be causing confusion for the web API’s users.',
	 'Objective',
	 '{"1":"","0.5":"","0":""}',
	 1.0,
	 NULL),

	(35, 'Number of HTTP 5XX errors in a period of X minutes',
	 'Number of server-side errors that occur in a defined period of time. If the number of errors is high, it might indicate a server malfunction. This is critical, since it may be motivating enough for developers to look for alternative APIs.',
	 'Objective',
	 '{"1":"","0.5":"","0":""}',
	 1.0,
	 NULL),

	(36, 'OAuth usage',
	 'Whether or not the web API supports OAuth for authentication. OAuth is a widely known standard, and using it will facilitate user experience.',
	 'Objective',
	 '{"1":"Yes.","0":"No."}',
	 0.6,
	 NULL),

	(37, 'Price',
	 'Price or cost of use of the web API. The economic costs derived from using the API (if any) should be reasonable.',
	 'Objective',
	 '{"1":"The price or cost of use of the web API is cheaper compared to the competition.","0.5":"The price or cost of use of the web API is similar to the competition.","0":"The price or cost of use of the web API is higher compared to the competition."}',
	 0.8,
	 "If the web API is free to use."),

	(38, 'Proper String usage',
	 'Whether or not the String type (or an equivalent) is used only when necessary. Strings should not be used if a better type exists, since they are cumbersome and error-prone.',
	 'Subjective',
	 '{"1":"Strings are only used when necessary.","0":"Strings are used unnecessarily."}',
	 0.8,
	 NULL),

	(39, 'Proper usage of response headers',
	 'Proportion of cases where headers are used appropriately. Defining proper response headers helps provide useful information about the server’s behavior.',
	 'Subjective',
	 '{"1":"Response headers are used always when appropriate.","0.5":"Response headers are not used when appropriate in some cases (e.g.: Not using Cache-Control when caching is supported).","0":"Response headers are never used (when they could be used)."}',
	 0.8,
	 NULL),

	(40, 'Similarity of endpoint names',
	 'Whether or not there are endpoints with similar names but different functionality. In general, similar names confuse users and increase the chances of making errors.',
	 'Subjective',
	 '{"1":"No endpoints with different functionality have similar names.","0":"One or more endpoints with different functionality have similar names."}',
	 0.8,
	 NULL),

	(41, 'Specification usage',
	 'Whether or not the web API provides a specification such as OpenAPI for its users. In addition to serving as a piece of documentation, a specification can help the developer with error checking and validation.',
	 'Objective',
	 '{"1":"Yes.","0":"No."}',
	 0.8,
	 NULL),
	
	(42, '(OpenAPI) Usage of components',
	 'Whether or not the web API’s OpenAPI spec uses components. Using components makes the OpenAPI specification more readable and removes unnecessary duplication. Components provide a powerful mechanism for defining reusable schemas, parameters, responses, and other elements within the specification.',
	 'Objective',
	 '{"1":"Yes.","0":"No."}',
	 0.6,
	 "If the web API has no specification or does not use OpenAPI."),
	
	(43, '(OpenAPI) Usage of formats and/or patterns',
	 'Whether or not the web API’s OpenAPI spec uses formats and/or patterns. Using formats and/or patterns within the OpenAPI spec help users better understand the kind of values that are expected for a given parameter and add an extra step of validation. Some examples are “format: uuid” and “format: email” and, if there is no predefined format that suits the data represented by a parameter, the “pattern” property can be used to define a regular expression that adapts to it. Note that using formats and/or patterns is not really necessary for simple fields, as this would add unneeded complexity.',
	 'Objective',
	 '{"1":"Yes.","0":"No."}',
	 0.6,
	 "If the web API has no specification or does not use OpenAPI."),

	(44, 'Specificity of parameter types',
	 'Whether or not all endpoint parameters’ types are as specific as possible. Data types should be as specific as possible to make the code more readable.',
	 'Subjective',
	 '{"1":"All types are as specific as possible.","0":"One or more types can be more specific."}',
	 0.8,
	 NULL),

	(45, 'Specificity of status codes',
	 'How specific are status codes returned by the web API. Ideally, status codes should be as specific as possible, as this could be valuable information for developers and increase understandability.',
	 'Subjective',
	 '{"1":"All status codes are as specific as possible.","0.5":"One or more status codes (but not all) can be more specific.","0":"Only generic status codes are used (200, 300, 400 and 500)."}',
	 0.6,
	 NULL),

	(46, 'Support for caching',
	 'Whether or not the web API supports caching. In some cases, caching can increase the API’s performance and, therefore, improve usability. If caching is supported, it should be specified with the Cache-Control header.',
	 'Objective',
	 '{"1":"Yes/The API is basic and would not benefit from caching.","0":"No."}',
	 0.6,
	 NULL),

	(47, 'Support for data filtering, pagination and sorting',
	 'Whether or not the web API supports data filtering, pagination and sorting for returned data. Providing developers with these tools helps make the web API more adaptable and improves usability.',
	 'Objective',
	 '{"1":"Yes.","0":"No."}',
	 0.8,
	 NULL),

	(48, 'Support for multiple return formats',
	 'Whether or not the web API supports multiple return formats. This helps make the web API more adaptable and improves usability.',
	 'Objective',
	 '{"1":"Yes.","0":"No."}',
	 0.6,
	 NULL),

	(49, 'Usage of plural nouns for resource names',
	 'Whether or not resource (endpoint) names are plural where applicable. The use of singular nouns does not give an idea if there are multiple items within, leading to confusion, and having both singular and plural nouns will double the API requests list.',
	 'Objective',
	 '{"1":"Resource names use plural nouns.","0":"Resource names use singular nouns, or a mix of plural and singular nouns."}',
	 0.6,
	 NULL),

	(50, 'Usage of verbs in base URLs',
	 'Whether or not the web API has endpoints with method-based names. Verbs on endpoint names should be avoided, as they do not convey any new information about the request, since this is handled by the HTTP methods associated with REST.',
	 'Objective',
	 '{"1":"No method-based URLs.","0":"One or more URLs are method-based (e.g.: getUser)."}',
	 0.6,
	 NULL),

	(51, 'Verbosity of error messages',
	 'Verbosity level of error messages returned by the web API. An API’s error feedback must be as informative as possible, so there is no room for confusion.',
	 'Subjective',
	 '{"1":"Error messages in the response body are detailed.","0.5":"Error messages in the response body are basic.","0":"No error messages are returned in the response body."}',
	 0.8,
	 NULL),

	(52, 'Versioning',
	 'Whether or not the web API is versioned. Versioning allows making breaking changes with new versions while maintaining backward compatibility for old versions.',
	 'Objective',
	 '{"1":"Yes.","0":"No."}',
	 0.6,
	 NULL);

INSERT INTO Attribute VALUES
	(1, "Efficiency", "How quickly can users perform tasks with the web API."), -- Nielsen (2012)
    (2, "Errors", "How many errors users make while using the web API, how severe are these errors, and how easily can they recover from them."), -- Nielsen (2012)
    (3, "Learnability", "How easily can users perform basic tasks the first time they encounter the web API."), -- Nielsen (2012)
    (4, "Memorability", "How easily can users reestablish proficiency after a period of not using the web API."), -- Nielsen (2012)
    (5, "Robustness", "The capacity of the system to resist error and adverse situations."), -- Mosqueira-Rey et al. (2018)
    (6, "Understandability", "The effort required to understand the semantics of API features based on their names and documentation."), -- Mosqueira-Rey et al. (2018)
    (7, "Satisfaction", "The capacity of the API to engage their users and preserve their interest."); -- Nielsen (2012)

INSERT INTO Source VALUES
	(1, "Basili, V. R., Caldiera, G., & Rombach, H. D. (1994). The Goal Question Metric approach. Encyclopedia of Software Engineering, 528-532.", 'Paper'),
	(2, "Machini, A., & Casas, S. (2024). Estudio empı́rico sobre la usabilidad de APIs web: La perspectiva de los consumidores-desarrolladores. Manuscript submitted for publication.", 'Paper'),
	(3, "Mosqueira-Rey, E., Alonso-Ríos, D., Moret-Bonillo, V., Fernández-Varela, I., & Álvarez-Estévez, D. (2018). A systematic approach to API usability: Taxonomy-derived criteria and a case study. Information and Software Technology, 97, 46-63. https://doi.org/10.1016/j.infsof.2017.12.010", 'Paper'),
	(4, "Scheller, T., & Kühn, E. (2015). Automated measurement of API usability: The API Concepts Framework. Information and Software Technology, 61, 145-162. https://doi.org/10.1016/j.infsof.2015.01.009", 'Paper'),
	(5, "de Souza, C. R. B., & Bentolila, D. L. M. (2009). Automatic evaluation of API usability using complexity metrics and visualizations. 2009 31st International Conference on Software Engineering - Companion Volume, 299-302. https://doi.org/10.1109/ICSE-COMPANION.2009.5071006", 'Paper'),
	(6, "Mulloy, B. (2012). Web API Design.", 'Other'),
	(7, "Koçi, R., Franch, X., Jovanovic, P., Abello, A. (2020). A Data-Driven Approach to Measure the Usability of Web APIs. 2020 46th Euromicro Conference on Software Engineering and Advanced Applications (SEAA). https://doi.org/10.1109/SEAA51224.2020.00021", 'Paper'),
	(8, "Rama, G. M., & Kak, A. (2013). Some structural measures of API usability. Software: Practice and Experience, 45, 75–110. https://doi.org/10.1002/spe.2215", 'Paper'),
	(9, "MuleSoft. (n.d.). Four principles for designing effective APIs. Retrieved from https://www.mulesoft.com/api-university/four-principles-designing-effective-apis", 'Website'),
	(10, "Au-Yeung, J., & Donovan, R. (2020). Best practices for REST API design. Retrieved from https://stackoverflow.blog/2020/03/02/best-practices-for-rest-api-design", 'Website'),
	(11, "Hämäläinen, O. (2019). API-First Design with Modern Tools (Bachelor's thesis, School of Business, Degree Programme in Business Information Technology). Retrieved from https://www.theseus.fi/bitstream/handle/10024/226493/Hamalainen_Oona.pdf", 'Thesis'),
	(12, "Riggins, J. (2015). Why API Developer Experience Matters More Than Ever. Retrieved from https://nordicapis.com/why-api-developer-experience-matters-more-than-ever", 'Website'),
	(13, "Nikolov, L. (n.d.). What’s the difference between API Latency and API Response Time? Retrieved from https://blog.sentry.io/whats-the-difference-between-api-latency-and-api-response-time", 'Website'),
	(14, "Nielsen, J. (1993). Response Times: The 3 Important Limits. Retrieved from https://www.nngroup.com/articles/response-times-3-important-limits", 'Website'),
	(15, "Levin, G. (2019). Top 5 REST API Design Problems. Retrieved from https://blog.restcase.com/top-5-rest-api-design-problems", 'Website'),
	(16, "Ma, S. P., Lan, C. W., Ho, C. T., & Ye, J. H. (2016). QoS-Aware Selection of Web APIs Based on ε-Pareto Genetic Algorithm. 2016 International Computer Symposium (ICS). https://doi.org/10.1109/ICS.2016.0122", 'Paper'),
	(17, "Lauret, A. (2019). The design of web APIs. Manning Publications.", 'Book'),
	(18, "Jin, B., Sahni, S., & Shevat, A. (2018). Designing web APIs. O'Reilly Media.", 'Book'),
	(19, "Jacobson, D., Brail, G., & Woods, D. (2012). APIs: A strategy guide. O'Reilly Media.", 'Book'),
	(20, "DuVander, A. (2021, November 24). API design patterns for REST. Stoplight Blog. Retrieved from https://blog.stoplight.io/api-design-patterns-for-rest", 'Website'),
	(21, "DuVander, A. (2021, November 26). REST API standards: Do they even exist? Stoplight Blog. Retrieved from https://blog.stoplight.io/rest-api-standards-do-they-even-exist", 'Website'),
	(22, "NordicAPIs. (2022). Developer experience: Top strategies to improve the developer experience of your API. Retrieved from https://nordicapis.com/ebooks/developer-experience", 'Website'),
	(23, "Pikovski, S. (2023, September 24). Why your OpenAPI spec sucks: Common pitfalls to avoid. Retrieved from https://blog.liblab.com/why-your-open-api-spec-sucks", 'Website'),
    (24, "Nielsen, J. (2012, January 3). Usability 101: Introduction to Usability. Retrieved from https://www.nngroup.com/articles/usability-101-introduction-to-usability", 'Website');

INSERT INTO Goal_Attribute VALUES
	(NULL, 1, 3),
	(NULL, 1, 6),
	(NULL, 2, 1),
	(NULL, 3, 4),
	(NULL, 4, 2),
	(NULL, 5, 5),
	(NULL, 6, 7);

INSERT INTO Question_Metric VALUES
	(NULL, 1, 1),
    (NULL, 1, 5),
    (NULL, 1, 6),
    (NULL, 1, 8),
    (NULL, 1, 9),
    (NULL, 1, 13),
    (NULL, 1, 16),
    (NULL, 1, 17),
    (NULL, 1, 18),
    (NULL, 1, 19),
    (NULL, 1, 20),
    (NULL, 1, 22),
    (NULL, 1, 31),
    (NULL, 1, 32),
    (NULL, 1, 33),
    (NULL, 1, 36),
    (NULL, 1, 38),
    (NULL, 1, 39),
    (NULL, 1, 33),
    (NULL, 1, 41),
    (NULL, 1, 44),
    (NULL, 1, 45),
    (NULL, 1, 48),
    (NULL, 1, 51),
    (NULL, 1, 52),
    (NULL, 2, 2),
    (NULL, 2, 3),
    (NULL, 2, 8),
    (NULL, 2, 32),
    (NULL, 2, 40),
    (NULL, 2, 49),
    (NULL, 2, 50),
    (NULL, 3, 42),
    (NULL, 3, 43),
    (NULL, 3, 21),
    (NULL, 3, 23),
    (NULL, 3, 26),
    (NULL, 3, 27),
    (NULL, 3, 28),
    (NULL, 3, 29),
    (NULL, 3, 30),
    (NULL, 3, 41),
    (NULL, 3, 51),
    (NULL, 4, 5),
    (NULL, 4, 6),
    (NULL, 4, 7),
    (NULL, 4, 9),
    (NULL, 4, 10),
    (NULL, 4, 19),
    (NULL, 4, 22),
    (NULL, 4, 38),
    (NULL, 4, 46),
    (NULL, 4, 47),
    (NULL, 5, 4),
    (NULL, 5, 8),
    (NULL, 5, 11),
    (NULL, 5, 12),
    (NULL, 5, 13),
    (NULL, 5, 14),
    (NULL, 5, 24),
    (NULL, 5, 25),
    (NULL, 5, 40),
    (NULL, 5, 44),
    (NULL, 6, 34),
    (NULL, 7, 24),
    (NULL, 7, 25),
    (NULL, 7, 35),
    (NULL, 8, 7),
    (NULL, 8, 15),
    (NULL, 8, 37),
    (NULL, 8, 45),
    (NULL, 8, 46);

INSERT INTO Metric_Source VALUES
	(NULL, 1, 3),
	(NULL, 1, 18),
	(NULL, 2, 6),
	(NULL, 3, 6),
	(NULL, 4, 6),
	(NULL, 5, 3),
	(NULL, 5, 4),
	(NULL, 5, 5),
	(NULL, 5, 7),
	(NULL, 5, 8),
	(NULL, 6, 4),
	(NULL, 7, 13),
	(NULL, 7, 14),
	(NULL, 8, 3),
	(NULL, 8, 17),
	(NULL, 8, 22),
	(NULL, 9, 17),
	(NULL, 10, 4),
	(NULL, 11, 3),
	(NULL, 11, 8),
	(NULL, 11, 17),
	(NULL, 11, 18),
	(NULL, 11, 19),
	(NULL, 11, 20),
	(NULL, 11, 22),
	(NULL, 12, 3),
	(NULL, 12, 8),
	(NULL, 12, 17),
	(NULL, 12, 18),
	(NULL, 12, 20),
	(NULL, 13, 17),
	(NULL, 13, 18),
	(NULL, 14, 17),
	(NULL, 14, 18),
	(NULL, 15, 16),
	(NULL, 16, 12),
	(NULL, 17, 3),
	(NULL, 17, 17),
	(NULL, 17, 21),
	(NULL, 17, 22),
	(NULL, 18, 3),
	(NULL, 18, 17),
	(NULL, 18, 21),
	(NULL, 18, 22),
	(NULL, 19, 17),
	(NULL, 20, 3),
	(NULL, 20, 17),
	(NULL, 21, 17),
	(NULL, 21, 18),
	(NULL, 22, 17),
	(NULL, 22, 19),
	(NULL, 23, 3),
	(NULL, 24, 17),
	(NULL, 25, 17),
	(NULL, 26, 22),
	(NULL, 27, 22),
	(NULL, 28, 22),
	(NULL, 29, 3),
	(NULL, 29, 22),
	(NULL, 30, 3),
	(NULL, 30, 19),
	(NULL, 30, 22),
	(NULL, 31, 6),
	(NULL, 31, 9),
	(NULL, 31, 10),
	(NULL, 31, 19),
	(NULL, 31, 20),
	(NULL, 31, 21),
	(NULL, 32, 8),
	(NULL, 33, 4),
	(NULL, 33, 5),
	(NULL, 33, 6),
	(NULL, 36, 6),
	(NULL, 36, 18),
	(NULL, 36, 19),
	(NULL, 37, 3),
	(NULL, 37, 16),
	(NULL, 37, 19),
	(NULL, 38, 4),
	(NULL, 38, 17),
	(NULL, 39, 9),
	(NULL, 39, 17),
	(NULL, 40, 7),
	(NULL, 41, 17),
	(NULL, 41, 18),
	(NULL, 41, 20),
	(NULL, 41, 21),
	(NULL, 41, 22),
	(NULL, 42, 23),
	(NULL, 43, 23),
	(NULL, 44, 3),
	(NULL, 44, 17),
	(NULL, 45, 17),
	(NULL, 45, 19),
	(NULL, 45, 22),
	(NULL, 46, 10),
	(NULL, 46, 15),
	(NULL, 46, 17),
	(NULL, 46, 19),
	(NULL, 46, 20),
	(NULL, 47, 6),
	(NULL, 47, 10),
	(NULL, 47, 12),
	(NULL, 47, 15),
	(NULL, 47, 17),
	(NULL, 47, 19),
	(NULL, 48, 6),
	(NULL, 48, 9),
	(NULL, 48, 10),
	(NULL, 48, 17),
	(NULL, 49, 6),
	(NULL, 49, 9),
	(NULL, 49, 10),
	(NULL, 49, 11),
	(NULL, 49, 17),
	(NULL, 49, 19),
	(NULL, 49, 20),
	(NULL, 49, 21),
	(NULL, 50, 6),
	(NULL, 50, 11),
	(NULL, 50, 20),
	(NULL, 51, 6),
	(NULL, 51, 17),
	(NULL, 51, 18),
	(NULL, 51, 22),
	(NULL, 52, 6),
	(NULL, 52, 9),
	(NULL, 52, 10),
	(NULL, 52, 11),
	(NULL, 52, 17),
	(NULL, 52, 18),
	(NULL, 52, 19),
	(NULL, 52, 22);

INSERT INTO Attribute_Source VALUES
	(NULL, 1, 24),
    (NULL, 2, 24),
    (NULL, 3, 24),
    (NULL, 4, 24),
    (NULL, 5, 3),
    (NULL, 6, 3),
    (NULL, 7, 24);